import{_ as l,o as a,c as i,V as e}from"./chunks/framework.2c059d95.js";const S=JSON.parse('{"title":"堆栈模型","description":"","frontmatter":{},"headers":[],"relativePath":"column/Algorithm/index.md","filePath":"column/Algorithm/index.md"}'),t={name:"column/Algorithm/index.md"},o=e('<h1 id="堆栈模型" tabindex="-1">堆栈模型 <a class="header-anchor" href="#堆栈模型" aria-label="Permalink to &quot;堆栈模型&quot;">​</a></h1><ul><li>JS 代码执行时</li><li>值类型变量，存储在栈</li><li>引用类型变量，存储在堆</li></ul><h2 id="堆" tabindex="-1">堆 <a class="header-anchor" href="#堆" aria-label="Permalink to &quot;堆&quot;">​</a></h2><ul><li>完全二叉树（左侧先填满）</li><li>最大堆：父节点 &gt;= 子节点</li><li>最小堆：父节点 &lt;= 子节点</li></ul><h2 id="逻辑结构-vs-物理结构" tabindex="-1">逻辑结构 VS 物理结构 <a class="header-anchor" href="#逻辑结构-vs-物理结构" aria-label="Permalink to &quot;逻辑结构 VS 物理结构&quot;">​</a></h2><ul><li>堆，逻辑结构是一颗二叉树</li><li>但它物理结构是一个数组</li><li>数组：适合连续存储 + 节省空间</li></ul><h2 id="堆-vs-bst" tabindex="-1">堆 VS BST <a class="header-anchor" href="#堆-vs-bst" aria-label="Permalink to &quot;堆 VS BST&quot;">​</a></h2><ul><li>查询比 BST 慢</li><li>删除比 BST 快，维持平衡更快</li><li>但整体的时间复杂度都在 O(logn) 级别，即树的高度</li></ul><h2 id="堆的使用场景" tabindex="-1">堆的使用场景 <a class="header-anchor" href="#堆的使用场景" aria-label="Permalink to &quot;堆的使用场景&quot;">​</a></h2><ul><li>特别适合“堆栈模型”</li><li>堆的数据，都是在栈中引用的，不需要从 root 遍历</li><li>堆恰巧是数组的形式，根据栈的地址，可用 O(1) 找到目标</li></ul>',10),r=[o];function n(s,h,c,d,u,_){return a(),i("div",null,r)}const f=l(t,[["render",n]]);export{S as __pageData,f as default};
